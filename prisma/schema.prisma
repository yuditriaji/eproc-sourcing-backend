generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multitenancy core
model Tenant {
  id            String   @id @default(cuid())
  name          String
  subdomain     String?  @unique
  residencyTag  String   // e.g., 'eu', 'us', 'apac'
  config        Json?
  tenantConfig  TenantConfig?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  users         User[]
  vendors       Vendor[]
  currencies    Currency[]
  contracts     Contract[]
  contractVendors ContractVendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders PurchaseOrder[]
  poVendors     POVendor[]
  tenders       Tender[]
  bids          Bid[]
  quotations    Quotation[]
  goodsReceipts GoodsReceipt[]
  invoices      Invoice[]
  payments      Payment[]
  documents     Document[]
  auditLogs     AuditLog[]
  systemConfigs SystemConfig[]
  roleConfigs   RoleConfig[]
  refreshTokens RefreshToken[]
  notifications Notification[]
  workflowSteps WorkflowStep[]
  tenantKeys    TenantKey[]
  outbox        Outbox[]
  // Basis relations
  processConfigs ProcessConfig[]
  rbacConfigs   RbacConfig[]
  orgUnits      OrgUnit[]
  // SAP-style enterprise purchasing relations
  companyCodes  CompanyCode[]
  plants        Plant[]
  storageLocations StorageLocation[]
  purchasingOrgs PurchasingOrg[]
  purchasingGroups PurchasingGroup[]
  porgAssignments PurchasingOrgAssignment[]

  @@map("tenants")
}

model TenantKey {
  tenantId     String
  version      Int
  wrappedDek   String    // base64-wrapped DEK
  kekVersion   Int       // KEK version
  algorithm    String    // e.g., 'aes-256-gcm'
  createdAt    DateTime  @default(now())
  rotatedAt    DateTime?
  isActive     Boolean   @default(true)
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([tenantId, version])
  @@map("tenant_keys")
}

model Outbox {
  id          String   @id @default(cuid())
  tenantId    String
  topic       String
  payload     Json
  headers     Json?
  status      String   @default("PENDING") // PENDING, SENT, FAILED
  createdAt   DateTime @default(now())
  processedAt DateTime?
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, status, createdAt])
  @@map("outbox")
}

model User {
  id                   String                @id @default(cuid())
  tenantId             String
  email                String
  username             String
  password             String
  firstName            String?
  lastName             String?
  role                 UserRole              @default(BUYER)
  abilities            Json?
  department           String?
  isActive             Boolean               @default(true)
  isVerified           Boolean               @default(false)
  phone                String?
  address              Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  auditLogs            AuditLog[]            @relation("AuditUser")
  contracts            Contract[]            @relation("ContractOwner")
  receivedPayments     Payment[]             @relation("PaymentReceiver")
  approvedPOs          PurchaseOrder[]       @relation("POApprover")
  createdPOs           PurchaseOrder[]       @relation("POCreator")
  approvedPRs          PurchaseRequisition[] @relation("PRApprover")
  purchaseRequisitions PurchaseRequisition[]
  createdTenders       Tender[]              @relation("TenderCreator")
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@unique([tenantId, username])
  @@index([tenantId])
  @@map("users")
}

model Vendor {
  id                 String           @id @default(cuid())
  tenantId           String
  orgUnitId          String?
  // SAP-style org refs (transition: all optional initially)
  companyCodeId      String?
  plantId            String?
  storageLocationId  String?
  purchasingOrgId    String?
  purchasingGroupId  String?
  name               String
  registrationNumber String?
  taxId              String?
  contactEmail       String?
  contactPhone       String?
  website            String?
  address            Json?
  bankDetails        Json?
  status             VendorStatus     @default(PENDING_APPROVAL)
  businessType       String?
  yearEstablished    Int?
  employeeCount      Int?
  annualRevenue      Decimal?
  certifications     Json?
  insuranceInfo      Json?
  rating             Decimal?         @db.Decimal(3, 2)
  totalContracts     Int              @default(0)
  onTimeDelivery     Decimal?         @db.Decimal(5, 2)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deletedAt          DateTime?
  bids               Bid[]
  contracts          ContractVendor[]
  documents          Document[]
  invoices           Invoice[]
  purchaseOrders     POVendor[]
  quotations         Quotation[]
  tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orgUnit            OrgUnit?         @relation("VendorOrgUnit", fields: [orgUnitId], references: [id])
  // Relations to new masters
  companyCode        CompanyCode?     @relation(fields: [companyCodeId], references: [id])
  plant              Plant?           @relation(fields: [plantId], references: [id])
  storageLocation    StorageLocation? @relation(fields: [storageLocationId], references: [id])
  purchasingOrg      PurchasingOrg?   @relation(fields: [purchasingOrgId], references: [id])
  purchasingGroup    PurchasingGroup? @relation(fields: [purchasingGroupId], references: [id])

  @@unique([tenantId, registrationNumber])
  @@index([tenantId])
  @@index([tenantId, orgUnitId])
  @@index([tenantId, companyCodeId])
  @@index([tenantId, plantId])
  @@index([tenantId, storageLocationId])
  @@index([tenantId, purchasingOrgId])
  @@index([tenantId, purchasingGroupId])
  @@map("vendors")
}

model Currency {
  id             String          @id @default(cuid())
  tenantId       String
  code           String          @db.VarChar(3)
  symbol         String          @db.VarChar(10)
  name           String
  isActive       Boolean         @default(true)
  exchangeRate   Decimal?        @db.Decimal(10, 6)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  contracts      Contract[]
  invoices       Invoice[]
  purchaseOrders PurchaseOrder[]
  quotations     Quotation[]
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
  @@index([tenantId])
  @@map("currencies")
}

model Contract {
  id                   String                @id @default(cuid())
  tenantId             String
  contractNumber       String
  title                String
  description          String?
  totalAmount          Decimal?              @db.Decimal(15, 2)
  currencyId           String?
  startDate            DateTime?
  endDate              DateTime?
  status               ContractStatus        @default(DRAFT)
  ownerId              String
  terms                Json?
  deliverables         Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  vendors              ContractVendor[]
  currency             Currency?             @relation(fields: [currencyId], references: [id])
  owner                User                  @relation("ContractOwner", fields: [ownerId], references: [id])
  documents            Document[]
  purchaseOrders       PurchaseOrder[]
  purchaseRequisitions PurchaseRequisition[]
  tenders              Tender[]
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, contractNumber])
  @@index([tenantId])
  @@map("contracts")
}

model ContractVendor {
  tenantId   String
  contractId String
  vendorId   String
  role       VendorRole @default(PRIMARY)
  signedAt   DateTime?
  createdAt  DateTime   @default(now())
  contract   Contract   @relation(fields: [contractId], references: [id], onDelete: Cascade)
  vendor     Vendor     @relation(fields: [vendorId], references: [id])
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([tenantId, contractId, vendorId])
  @@index([tenantId])
  @@map("contract_vendors")
}

model PurchaseRequisition {
  id              String          @id @default(cuid())
  tenantId        String
  processConfigId String?
  orgUnitId       String?
  // SAP-style org refs (optional initially)
  companyCodeId      String?
  plantId            String?
  storageLocationId  String?
  purchasingOrgId    String?
  purchasingGroupId  String?
  prNumber        String
  title           String
  description     String?
  items           Json
  estimatedAmount Decimal?        @db.Decimal(15, 2)
  requiredBy      DateTime?
  justification   String?
  status          PRStatus        @default(PENDING)
  approvedAt      DateTime?
  approvedById    String?
  rejectionReason String?
  contractId      String?
  requesterId     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  documents       Document[]
  purchaseOrders  PurchaseOrder[]
  approver        User?           @relation("PRApprover", fields: [approvedById], references: [id])
  contract        Contract?       @relation(fields: [contractId], references: [id])
  requester       User            @relation(fields: [requesterId], references: [id])
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  processConfig   ProcessConfig?  @relation("PRProcessConfig", fields: [processConfigId], references: [id])
  orgUnit         OrgUnit?        @relation("PROrgUnit", fields: [orgUnitId], references: [id])
  // Relations to new masters
  companyCode     CompanyCode?     @relation(fields: [companyCodeId], references: [id])
  plant           Plant?           @relation(fields: [plantId], references: [id])
  storageLocation StorageLocation? @relation(fields: [storageLocationId], references: [id])
  purchasingOrg   PurchasingOrg?   @relation(fields: [purchasingOrgId], references: [id])
  purchasingGroup PurchasingGroup? @relation(fields: [purchasingGroupId], references: [id])

  @@unique([tenantId, prNumber])
  @@index([tenantId])
  @@index([tenantId, processConfigId])
  @@index([tenantId, orgUnitId])
  @@index([tenantId, companyCodeId])
  @@index([tenantId, plantId])
  @@index([tenantId, storageLocationId])
  @@index([tenantId, purchasingOrgId])
  @@index([tenantId, purchasingGroupId])
  @@map("purchase_requisitions")
}

model PurchaseOrder {
  id                  String               @id @default(cuid())
  tenantId            String
  processConfigId     String?
  orgUnitId           String?
  // SAP-style org refs (optional initially, can be enforced later)
  companyCodeId       String?
  plantId             String?
  storageLocationId   String?
  purchasingOrgId     String?
  purchasingGroupId   String?
  poNumber            String
  title               String
  description         String?
  amount              Decimal              @db.Decimal(15, 2)
  currencyId          String?
  taxAmount           Decimal?             @db.Decimal(15, 2)
  totalAmount         Decimal?             @db.Decimal(15, 2)
  orderDate           DateTime             @default(now())
  expectedDelivery    DateTime?
  items               Json
  terms               Json?
  status              POStatus             @default(DRAFT)
  approvedAt          DateTime?
  approvedById        String?
  prId                String?
  contractId          String?
  createdById         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  documents           Document[]
  goodsReceipts       GoodsReceipt[]
  invoices            Invoice[]
  payments            Payment[]
  vendors             POVendor[]
  approver            User?                @relation("POApprover", fields: [approvedById], references: [id])
  contract            Contract?            @relation(fields: [contractId], references: [id])
  creator             User                 @relation("POCreator", fields: [createdById], references: [id])
  currency            Currency?            @relation(fields: [currencyId], references: [id])
  purchaseRequisition PurchaseRequisition? @relation(fields: [prId], references: [id])
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  processConfig       ProcessConfig?       @relation("POProcessConfig", fields: [processConfigId], references: [id])
  orgUnit             OrgUnit?             @relation("POOrgUnit", fields: [orgUnitId], references: [id])
  // Relations to new masters
  companyCode         CompanyCode?         @relation(fields: [companyCodeId], references: [id])
  plant               Plant?               @relation(fields: [plantId], references: [id])
  storageLocation     StorageLocation?     @relation(fields: [storageLocationId], references: [id])
  purchasingOrg       PurchasingOrg?       @relation(fields: [purchasingOrgId], references: [id])
  purchasingGroup     PurchasingGroup?     @relation(fields: [purchasingGroupId], references: [id])

  @@unique([tenantId, poNumber])
  @@index([tenantId])
  @@index([tenantId, processConfigId])
  @@index([tenantId, orgUnitId])
  @@index([tenantId, companyCodeId])
  @@index([tenantId, plantId])
  @@index([tenantId, storageLocationId])
  @@index([tenantId, purchasingOrgId])
  @@index([tenantId, purchasingGroupId])
  @@map("purchase_orders")
}

model POVendor {
  tenantId       String
  poId           String
  vendorId       String
  role           VendorRole    @default(PRIMARY)
  assignedAmount Decimal?      @db.Decimal(15, 2)
  assignedItems  Json?
  createdAt      DateTime      @default(now())
  purchaseOrder  PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  vendor         Vendor        @relation(fields: [vendorId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([tenantId, poId, vendorId])
  @@index([tenantId])
  @@map("po_vendors")
}

model Tender {
  id               String       @id @default(cuid())
  tenantId         String
  processConfigId  String?
  orgUnitId        String?
  // SAP-style org refs (optional initially)
  companyCodeId      String?
  plantId            String?
  storageLocationId  String?
  purchasingOrgId    String?
  purchasingGroupId  String?
  tenderNumber     String
  title            String
  description      String
  requirements     Json
  criteria         Json
  estimatedValue   Decimal?     @db.Decimal(15, 2)
  publishedAt      DateTime?
  closingDate      DateTime?
  evaluationDate   DateTime?
  awardDate        DateTime?
  category         String?
  department       String?
  status           TenderStatus @default(DRAFT)
  contractId       String?
  creatorId        String
  evaluationMatrix Json?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  bids             Bid[]
  documents        Document[]
  quotations       Quotation[]
  contract         Contract?    @relation(fields: [contractId], references: [id])
  creator          User         @relation("TenderCreator", fields: [creatorId], references: [id])
  tenant           Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  processConfig    ProcessConfig? @relation("TenderProcessConfig", fields: [processConfigId], references: [id])
  orgUnit          OrgUnit?     @relation("TenderOrgUnit", fields: [orgUnitId], references: [id])
  // Relations to new masters
  companyCode     CompanyCode?     @relation(fields: [companyCodeId], references: [id])
  plant           Plant?           @relation(fields: [plantId], references: [id])
  storageLocation StorageLocation? @relation(fields: [storageLocationId], references: [id])
  purchasingOrg   PurchasingOrg?   @relation(fields: [purchasingOrgId], references: [id])
  purchasingGroup PurchasingGroup? @relation(fields: [purchasingGroupId], references: [id])

  @@unique([tenantId, tenderNumber])
  @@index([tenantId])
  @@index([tenantId, processConfigId])
  @@index([tenantId, orgUnitId])
  @@index([tenantId, companyCodeId])
  @@index([tenantId, plantId])
  @@index([tenantId, storageLocationId])
  @@index([tenantId, purchasingOrgId])
  @@index([tenantId, purchasingGroupId])
  @@map("tenders")
}

model Bid {
  id                String     @id @default(cuid())
  tenantId          String
  tenderId          String
  vendorId          String
  technicalScore    Decimal?   @db.Decimal(5, 2)
  commercialScore   Decimal?   @db.Decimal(5, 2)
  totalScore        Decimal?   @db.Decimal(5, 2)
  bidAmount         Decimal?   @db.Decimal(15, 2)
  status            BidStatus  @default(DRAFT)
  submittedAt       DateTime?
  encryptedData     String?
  keyVersion        Int?
  technicalProposal Json?
  financialProposal Json?
  compliance        Json?
  evaluationNotes   String?
  evaluatedAt       DateTime?
  evaluatedBy       String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?
  tender            Tender     @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  vendor            Vendor     @relation(fields: [vendorId], references: [id])
  documents         Document[]
  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, tenderId, vendorId])
  @@index([tenantId])
  @@map("bids")
}

model Quotation {
  id              String          @id @default(cuid())
  tenantId        String
  quotationNumber String
  tenderId        String?
  vendorId        String
  amount          Decimal         @db.Decimal(15, 2)
  currencyId      String?
  validUntil      DateTime?
  items           Json
  notes           String?
  terms           Json?
  score           Decimal?        @db.Decimal(5, 2)
  status          QuotationStatus @default(SUBMITTED)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  documents       Document[]
  currency        Currency?       @relation(fields: [currencyId], references: [id])
  tender          Tender?         @relation(fields: [tenderId], references: [id])
  vendor          Vendor          @relation(fields: [vendorId], references: [id])
  tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, quotationNumber])
  @@index([tenantId])
  @@map("quotations")
}

model GoodsReceipt {
  id              String             @id @default(cuid())
  tenantId        String
  receiptNumber   String
  poId            String
  receivedDate    DateTime           @default(now())
  receivedItems   Json
  notes           String?
  inspectionNotes String?
  inspectedBy     String?
  inspectedAt     DateTime?
  status          GoodsReceiptStatus @default(PARTIAL)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?
  documents       Document[]
  purchaseOrder   PurchaseOrder      @relation(fields: [poId], references: [id], onDelete: Cascade)
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, receiptNumber])
  @@index([tenantId])
  @@map("goods_receipts")
}

model Invoice {
  id            String         @id @default(cuid())
  tenantId      String
  invoiceNumber String
  poId          String?
  vendorId      String
  amount        Decimal        @db.Decimal(15, 2)
  currencyId    String?
  taxAmount     Decimal?       @db.Decimal(15, 2)
  totalAmount   Decimal        @db.Decimal(15, 2)
  invoiceDate   DateTime       @default(now())
  dueDate       DateTime?
  items         Json
  notes         String?
  status        InvoiceStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  documents     Document[]
  currency      Currency?      @relation(fields: [currencyId], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [poId], references: [id])
  vendor        Vendor         @relation(fields: [vendorId], references: [id])
  payments      Payment[]
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, invoiceNumber])
  @@index([tenantId])
  @@map("invoices")
}

model Payment {
  id            String        @id @default(cuid())
  tenantId      String
  paymentNumber String
  invoiceId     String?
  poId          String
  amount        Decimal       @db.Decimal(15, 2)
  paymentType   PaymentType   @default(FULL)
  requestedDate DateTime      @default(now())
  scheduledDate DateTime?
  processedDate DateTime?
  reference     String?
  method        String?
  notes         String?
  status        PaymentStatus @default(REQUESTED)
  approvedBy    String?
  approvedAt    DateTime?
  receivedById  String?
  receivedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  documents     Document[]
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id])
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  receiver      User?         @relation("PaymentReceiver", fields: [receivedById], references: [id])
  tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, paymentNumber])
  @@index([tenantId])
  @@map("payments")
}

model Document {
  id                  String               @id @default(cuid())
  tenantId            String
  fileName            String
  originalName        String
  filePath            String
  fileSize            Int
  mimeType            String
  documentType        DocumentType         @default(OTHER)
  title               String?
  description         String?
  tags                String[]
  isConfidential      Boolean              @default(false)
  accessLevel         String?
  version             String               @default("1.0")
  parentId            String?
  contractId          String?
  tenderId            String?
  bidId               String?
  quotationId         String?
  prId                String?
  poId                String?
  receiptId           String?
  invoiceId           String?
  paymentId           String?
  vendorId            String?
  uploadedBy          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  bid                 Bid?                 @relation(fields: [bidId], references: [id])
  contract            Contract?            @relation(fields: [contractId], references: [id])
  invoice             Invoice?             @relation(fields: [invoiceId], references: [id])
  parent              Document?            @relation("DocumentVersions", fields: [parentId], references: [id])
  versions            Document[]           @relation("DocumentVersions")
  payment             Payment?             @relation(fields: [paymentId], references: [id])
  purchaseOrder       PurchaseOrder?       @relation(fields: [poId], references: [id])
  purchaseRequisition PurchaseRequisition? @relation(fields: [prId], references: [id])
  quotation           Quotation?           @relation(fields: [quotationId], references: [id])
  goodsReceipt        GoodsReceipt?        @relation(fields: [receiptId], references: [id])
  tender              Tender?              @relation(fields: [tenderId], references: [id])
  vendor              Vendor?              @relation(fields: [vendorId], references: [id])
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("documents")
}

model AuditLog {
  id         String      @id @default(cuid())
  tenantId   String
  userId     String?
  action     AuditAction
  targetType String?
  targetId   String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  timestamp  DateTime    @default(now())
  user       User?       @relation("AuditUser", fields: [userId], references: [id])
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([userId])
  @@index([targetType, targetId])
  @@index([timestamp])
  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  tenantId    String
  key         String
  value       Json
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, key])
  @@index([tenantId])
  @@map("system_config")
}

// Config as foundational basis
model TenantConfig {
  id              String   @id @default(cuid())
  tenantId        String   @unique
  orgStructure    Json?    // e.g., { levels: 5, ccs: [{ code: "CC1", pgs: 2 }, ...] }
  businessVariants Json?   // e.g., array of process variants
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@map("tenant_config")
}

enum ProcessType {
  TENDER
  PROCUREMENT
  INVOICE
  PAYMENT
}

model ProcessConfig {
  id         String      @id @default(cuid())
  tenantId   String
  name       String
  processType ProcessType
  steps      Json        // [{ stepName, requiredRole, conditions... }]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenders    Tender[]    @relation("TenderProcessConfig")
  purchaseOrders PurchaseOrder[] @relation("POProcessConfig")
  purchaseRequisitions PurchaseRequisition[] @relation("PRProcessConfig")
  rbacConfigs RbacConfig[] @relation("RbacToProcessConfig")

  @@index([tenantId, processType])
  @@map("process_config")
}

model RbacConfig {
  id              String   @id @default(cuid())
  tenantId        String
  roleName        String
  orgLevel        Int?
  permissions     Json
  processConfigId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  processConfig   ProcessConfig? @relation("RbacToProcessConfig", fields: [processConfigId], references: [id])

  @@unique([tenantId, roleName, processConfigId])
  @@index([tenantId])
  @@map("rbac_config")
}

enum OrgUnitType {
  COMPANY_CODE
  PURCHASING_GROUP
}

model OrgUnit {
  id          String      @id @default(cuid())
  tenantId    String
  parentId    String?
  level       Int
  name        String
  type        OrgUnitType
  companyCode String?
  pgCode      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parent      OrgUnit?    @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children    OrgUnit[]   @relation("OrgUnitHierarchy")
  vendors     Vendor[]    @relation("VendorOrgUnit")
  tenders     Tender[]    @relation("TenderOrgUnit")
  purchaseOrders PurchaseOrder[] @relation("POOrgUnit")
  purchaseRequisitions PurchaseRequisition[] @relation("PROrgUnit")

  @@unique([tenantId, companyCode])
  @@unique([tenantId, pgCode])
  @@index([tenantId, type])
  @@map("org_units")
}

// SAP-style enterprise purchasing structure
model CompanyCode {
  id          String   @id @default(cuid())
  tenantId    String
  code        String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plants      Plant[]
  purchasingOrgAssignments PurchasingOrgAssignment[]
  vendors     Vendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders PurchaseOrder[]
  tenders     Tender[]

  @@unique([tenantId, code])
  @@index([tenantId, code])
  @@map("company_codes")
}

model Plant {
  id          String   @id @default(cuid())
  tenantId    String
  companyCodeId String
  code        String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  companyCode CompanyCode @relation(fields: [companyCodeId], references: [id])
  storageLocations StorageLocation[]
  purchasingOrgAssignments PurchasingOrgAssignment[]
  vendors     Vendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders PurchaseOrder[]
  tenders     Tender[]

  @@unique([tenantId, companyCodeId, code])
  @@index([tenantId, companyCodeId])
  @@map("plants")
}

model StorageLocation {
  id        String   @id @default(cuid())
  tenantId  String
  plantId   String
  code      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plant     Plant    @relation(fields: [plantId], references: [id])
  vendors   Vendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders PurchaseOrder[]
  tenders   Tender[]

  @@unique([tenantId, plantId, code])
  @@index([tenantId, plantId])
  @@map("storage_locations")
}

model PurchasingOrg {
  id        String   @id @default(cuid())
  tenantId  String
  code      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  groups    PurchasingGroup[]
  assignments PurchasingOrgAssignment[]
  vendors    Vendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders PurchaseOrder[]
  tenders    Tender[]

  @@unique([tenantId, code])
  @@index([tenantId, code])
  @@map("purchasing_orgs")
}

model PurchasingGroup {
  id               String   @id @default(cuid())
  tenantId         String
  purchasingOrgId  String
  code             String
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  purchasingOrg    PurchasingOrg @relation(fields: [purchasingOrgId], references: [id])
  vendors          Vendor[]
  purchaseRequisitions PurchaseRequisition[]
  purchaseOrders   PurchaseOrder[]
  tenders          Tender[]

  @@unique([tenantId, purchasingOrgId, code])
  @@index([tenantId, purchasingOrgId])
  @@map("purchasing_groups")
}

model PurchasingOrgAssignment {
  id              String   @id @default(cuid())
  tenantId        String
  purchasingOrgId String
  companyCodeId   String?
  plantId         String?
  createdAt       DateTime @default(now())
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  purchasingOrg   PurchasingOrg @relation(fields: [purchasingOrgId], references: [id])
  companyCode     CompanyCode?  @relation(fields: [companyCodeId], references: [id])
  plant           Plant?        @relation(fields: [plantId], references: [id])

  @@index([tenantId, purchasingOrgId])
  @@index([tenantId, companyCodeId])
  @@index([tenantId, plantId])
  @@map("porg_assignments")
}

model RoleConfig {
  id          String   @id @default(cuid())
  tenantId    String
  roleName    String
  permissions Json
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, roleName])
  @@index([tenantId])
  @@map("role_configs")
}

model RefreshToken {
  id        String   @id @default(cuid())
  tenantId  String
  token     String
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, token])
  @@index([tenantId])
  @@map("refresh_tokens")
}

model Notification {
  id        String    @id @default(cuid())
  tenantId  String
  userId    String
  title     String
  message   String
  type      String
  category  String?
  data      Json?
  actionUrl String?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId, isRead])
  @@map("notifications")
}

model WorkflowStep {
  id               String    @id @default(cuid())
  tenantId         String
  workflowType     String
  stepName         String
  stepOrder        Int
  conditions       Json?
  assignedRole     UserRole?
  assignedUserId   String?
  requiresApproval Boolean   @default(false)
  approvalCount    Int       @default(1)
  timeoutHours     Int?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, workflowType, stepOrder])
  @@index([tenantId])
  @@map("workflow_steps")
}

enum UserRole {
  ADMIN
  USER
  BUYER
  VENDOR
  APPROVER
  FINANCE
  MANAGER
}

enum VendorStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
  BLACKLISTED
}

enum ContractStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  CLOSED
  TERMINATED
}

enum PRStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum POStatus {
  DRAFT
  APPROVED
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELLED
}

enum TenderStatus {
  DRAFT
  PUBLISHED
  CLOSED
  AWARDED
  CANCELLED
}

enum BidStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum QuotationStatus {
  SUBMITTED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum GoodsReceiptStatus {
  PARTIAL
  COMPLETE
  REJECTED
}

enum InvoiceStatus {
  PENDING
  APPROVED
  PAID
  OVERDUE
  DISPUTED
  CANCELLED
}

enum PaymentStatus {
  REQUESTED
  APPROVED
  PROCESSED
  FAILED
  CANCELLED
}

enum PaymentType {
  FULL
  DOWN_PAYMENT
  INSTALLMENT
  MILESTONE
}

enum VendorRole {
  PRIMARY
  SECONDARY
  SUBCONTRACTOR
}

enum DocumentType {
  CONTRACT
  PURCHASE_ORDER
  INVOICE
  RECEIPT
  SPECIFICATION
  CERTIFICATE
  OTHER
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPROVE
  REJECT
  SUBMIT
}
